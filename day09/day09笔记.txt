1.JSP
	[1] 简介
		> HTML
			- HTML擅长显示一个静态的网页，但是不能调用Java程序。
		> Servlet
			- Servlet擅长调用Java程序和后台进行交互，但是它不擅长显示一个完整的HTML页面。
		> 我们希望创建一个新的技术 HTML + Servlet 强强联合
		> JSP全称Java Server Pages，顾名思义就是运行中java服务器中页面，也就是在我们JavaWeb中的动态页面，其本质就是一个Servlet。
		> JSP不能脱离服务器运行。
		> JSP = HTML + JAVA代码
		> 平常开发中Servlet负责处理请求，JSP负责显示页面
		
	[2] 运行原理
		> JSP的本质就是一个Servlet
		> JSP的运行之前会先被Tomcat服务器翻译为.java文件，然后在将.java文本编译为.class文件
			而我们在访问jsp时，处理请求的就是那个翻译后的类。
				jsp --翻译--> java --编译--> class
		
		> 我们需要去到镜像服务器中去寻找结果。
		> 实际上最终翻译为的java文件就是一个Servlet。
			1.继承HttpJspBase这个类，而该类又继承了HttpServlet
			2.在总的web.xml文件中，同样发现了jsp相关的配置
				由此证明jsp确实是一个Servlet。
	
	[3] 基本语法
		> 学习jsp的基本语法主要就是学习服务器是如何将一个JSP文件翻译为一个java文件
		
		> 模板元素
			就是JSP中html代码
			模板元素的内容最终会作为out.write()的参数，最终在页面中输出
			在HTML页面中怎么写网页，在JSP中就怎么写
			
		> 脚本片段
			<% %>
			- 在脚本片段中可以直接来编写Java代码
			- 脚本片段中的代码会原封不动的复制到java文件的service方法中的指定的位置
			- 在service方法中可以写什么在脚本片段中就可以写什么
			- 在jsp页面可以有多个脚本片段，但是多个脚本片段之间要保证结构完整
			
		> 表达式
			<%= %>
			- jsp表达式用来向页面中输出一个对象
			- jsp表达式中的内容最终会作为out.print()的参数输出到页面中
			- out.print()方法能接收什么样的参数，表达式中就可以写什么
				而out.print()可以接收任意类型的参数，所以表达式中可以传任意对象。
				
			
		> 注释
			<%-- --%>
			- jsp注释中的内容不会被翻译到jsp对应java文件中
			- 在JSP中可以使用三种注释
			- html注释  java注释  jsp注释
			- 三种注释的可见范围
			
						jsp源码          java源文件					网页的源码
		html注释   <!---->      可见       		可见					可见
		java注释  //       可见				可见					不可见
		jsp注释          可见				不可见					不可见
			
			
		> 声明
			<%! %>
			- JSP声明中的内容会直接写到jsp对应的java类中。
			- 在类中可以写什么在声明就可以写什么。可以定义属性，可以定义方法。。
			- 一般情况我们不会在jsp对应的类中写东西，所以声明基本不用，知道就行。
		
	[4] JSP指令
		> 格式：<%@指令名 属性名1=”属性值1” 属性名2=”属性值2”  %>
		
		> page指令
			- page 指令主要是告诉jsp引擎如何解析jsp文件。
				- 可能会用到的属性
				- import 用来导包
				- language指定jsp文件被翻译为哪种语言
					该属性只有一个值就是 java
				- contentType 指定当前网页的编码
					response.setContentType("text/html;charset=utf-8");
					- 给浏览器看的
				- pageEncoding 指定当前页面的编码，jsp引擎会根据该编码解析jsp文件
					- 给服务器看的
				- errorPage 指定页面出现错误以后转发到的页面，这个属性的地址不加项目名。
				- isErrorPage 当前页面是否为一个错误页面，如果为true则可以在页面中使用exception对象。	

				- 基本不使用的属性
				- autoFlush 是否自动刷新缓存，默认值是true，一般不去修改这个属性
				- buffer 缓存的大小 默认8kb 一般不修改
				- extends 指定jsp对应的java类所要基础的父类。根本不用
				- info 设置当前jsp的信息，没用
				- isELIgnored 是否自动忽略EL表达式，默认为false，不忽略，一般不修改
				- session 是否可以直接使用session对象，默认值为true，一般不修改
				
				
		> include指令
			- <%@ include file="" %>
			- 静态包含指令
			- include指令主要用来将其他网页包含进当前JSP页面
			- 他会将被包含页面原封不动复制到目标页面的指定位置。
			- 它只会翻译目标页面，而不会翻译被包含页面
			- 比如 1.jsp include 2.jsp
				相当于将2.jsp复制进1.jsp的指定位置
				只会翻译1.jsp，而不会翻译2.jsp
		
		
	[5] JSP动作标签
		> JSP动作标签最终都会被翻译为一套java代码，在程序中执行。
	
		<jsp:标签名 属性名="属性值"></jsp:标签名>
	
		<jsp:forward page="target.jsp">
			<jsp:param value="paramValue" name="paramName"/>
		</jsp:forward>
			> jsp:forward标签作用就是转发请求！
			> 如果标签中没有子标签，那么标签体不能出现任何内容
			> 可以标签中使用jsp:param标签向目标页面传递请求参数。
		
		<jsp:include page="target.jsp"></jsp:include>
			> jsp:include 动态包含
			> 动态包含会为所有网页都生成一个java文件
			> 动态包含并不是直接将被包含页面直接复制进目标页面，而是通过如下代码，将页面包含进当前页
				org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/include/2.jsp", out, false);
		
	[6] 隐含对象
		> 在JSP中一共有9个隐含对象，这个9个对象我可以在JSP中直接使用。
		> 因为在service方法已经对这个九个隐含对象进行声明及赋值，所以可以在JSP中直接使用。
			- pageContext
				类型：PageContext
				代表：当前页面的上下文
				作用：可以获取到页面中的其他隐含对象，同时它还是一个域对象。
			
			- request
				类型：HttpServletRequest
				代表：请求
				作用：可以获取用户发送的请求信息，它也是一个域对象。
			
			- session
				类型：HttpSession
				代表：当前会话
				作用：可以作为域对象，用来共享数据。
			
			- application
				类型：ServletContext
				代表：代表整个WEB应用
				作用：是JavaWeb中最大的域对象。
			
			- response
				类型：HttpServletResponse
				代表：响应
				作用：向浏览器发送响应信息
				
			- out
				类型：JspWriter
				代表：输出流
				作用：可以向页面输出内容
			
			- config
				类型：ServletConfig
				代表：当前JSP的配置信息
				作用：可以获取到Servlet标签中初始化参数
			
			- page
				类型：Object 在service方法中有如下代码 Object page = this;
				代表：代表当前JSP的对象
				作用：
			
			- exception
				类型：Throwable
				代表：异常信息
				作用：获取页面中的异常
	
	
		> 在JavaWeb中一共有四个域对象pageContext 、request、session、application。
		> 在JSP中可以获取全部四个域对象，而在Servlet中只能获取到三个
		> 使用域对象有一个原则，能用小的就不用大的。
		> 域对象就是在不同的WEB资源之间共享数据的。这些不同的web资源主要指JSP和Servlet
		> 域对象都有的方法：
			void setAttribute(String name , Object value) 向域中添加属性
			Object getAttribute(String name) 根据属性名从域中获取属性
			void removeAttribute(String name) 根据属性名从域中移除属性
		> 我们四个域对象分别有其不同的范围：
			pageContext
				类型：PageContext
				范围：当前页面，一旦切换页面则域中的属性丢失。
				应用：用来向标签中传递数据。
			
			request
				类型：HttpServletRequest
				范围：当前请求，一但发送多次请求则域中的属性丢失。
				应用：需要在一次请求中共享数据时。
				区分：转发时可以在request域中共享属性，而重定向时不可以
			
			session
				类型：HttpSession
				范围：在一次会话中有效，会话就是一次打开浏览器到关闭浏览器的过程。
				应用：主要是登录这种操作
				注意：不同的浏览器之间不共享会话。
				
			application
				类型：ServletContext
				范围：只要项目不卸载application中属性就不丢失
				应用：在线用户
	
	[6] JSP与Servlet分工
		> JSP本质就是一个Servlet！！！
		> 曾经在Model1这个年代，在我们的项目中已经看不见Servlet，JSP已经完全代替了Servlet。
		> JSP擅长显示一个页面，不擅长编写Java代码
		> Servlet擅长编写java代码，而不擅长显示页面
		> 我们使用Servlet处理程序，而使用JSP显示页面。
		> 将servlet处理后的结果放入进域中，然后交给JSP显示。
		
		>练习：
			通过Servlet去数据库中查询一组学生列表，然后交给JSP显示列表。
			1.用户先要访问ListServlet
			2.ListServlet去数据库查询学生列表
				- 直接在Servlet创建一个List
			3.将列表放入域对象中
			4.通过JSP显示列表
	
	
	
	